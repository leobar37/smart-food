# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Client {
  id: ID!
  phone: String
  name: String
  lastName: String
  direction: String
  email: String
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
}

input ClientWhereUniqueInput {
  id: ID
  email: String
}

input ClientWhereInput {
  AND: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  NOT: [ClientWhereInput!]
  id: IDFilter
  phone: StringFilter
  name: StringFilter
  lastName: StringFilter
  direction: StringFilter
  email: StringFilter
  orders: OrderManyRelationFilter
}

input OrderManyRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input ClientOrderByInput {
  id: OrderDirection
  phone: OrderDirection
  name: OrderDirection
  lastName: OrderDirection
  direction: OrderDirection
  email: OrderDirection
}

input ClientUpdateInput {
  phone: String
  name: String
  lastName: String
  direction: String
  email: String
  orders: OrderRelateToManyForUpdateInput
}

input OrderRelateToManyForUpdateInput {
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input ClientUpdateArgs {
  where: ClientWhereUniqueInput!
  data: ClientUpdateInput!
}

input ClientCreateInput {
  phone: String
  name: String
  lastName: String
  direction: String
  email: String
  orders: OrderRelateToManyForCreateInput
}

input OrderRelateToManyForCreateInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

type Product {
  id: ID!
  photo: CloudinaryImage_File
  name: String
  count: Int
  price: Float
  category: Category
  options(
    where: OptionWhereInput! = {}
    orderBy: [OptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Option!]
  optionsCount(where: OptionWhereInput! = {}): Int
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  count: IntNullableFilter
  price: FloatNullableFilter
  category: CategoryWhereInput
  options: OptionManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input OptionManyRelationFilter {
  every: OptionWhereInput
  some: OptionWhereInput
  none: OptionWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  count: OrderDirection
  price: OrderDirection
}

input ProductUpdateInput {
  photo: Upload
  name: String
  count: Int
  price: Float
  category: CategoryRelateToOneForUpdateInput
  options: OptionRelateToManyForUpdateInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input OptionRelateToManyForUpdateInput {
  disconnect: [OptionWhereUniqueInput!]
  set: [OptionWhereUniqueInput!]
  create: [OptionCreateInput!]
  connect: [OptionWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  photo: Upload
  name: String
  count: Int
  price: Float
  category: CategoryRelateToOneForCreateInput
  options: OptionRelateToManyForCreateInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input OptionRelateToManyForCreateInput {
  create: [OptionCreateInput!]
  connect: [OptionWhereUniqueInput!]
}

type Option {
  id: ID!
  name: String
  limit: Int
  label: String
  product: Product
  subOptions(
    where: SubOptionWhereInput! = {}
    orderBy: [SubOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SubOption!]
  subOptionsCount(where: SubOptionWhereInput! = {}): Int
}

input OptionWhereUniqueInput {
  id: ID
}

input OptionWhereInput {
  AND: [OptionWhereInput!]
  OR: [OptionWhereInput!]
  NOT: [OptionWhereInput!]
  id: IDFilter
  name: StringFilter
  limit: IntNullableFilter
  label: StringFilter
  product: ProductWhereInput
  subOptions: SubOptionManyRelationFilter
}

input SubOptionManyRelationFilter {
  every: SubOptionWhereInput
  some: SubOptionWhereInput
  none: SubOptionWhereInput
}

input OptionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  limit: OrderDirection
  label: OrderDirection
}

input OptionUpdateInput {
  name: String
  limit: Int
  label: String
  product: ProductRelateToOneForUpdateInput
  subOptions: SubOptionRelateToManyForUpdateInput
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input SubOptionRelateToManyForUpdateInput {
  disconnect: [SubOptionWhereUniqueInput!]
  set: [SubOptionWhereUniqueInput!]
  create: [SubOptionCreateInput!]
  connect: [SubOptionWhereUniqueInput!]
}

input OptionUpdateArgs {
  where: OptionWhereUniqueInput!
  data: OptionUpdateInput!
}

input OptionCreateInput {
  name: String
  limit: Int
  label: String
  product: ProductRelateToOneForCreateInput
  subOptions: SubOptionRelateToManyForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input SubOptionRelateToManyForCreateInput {
  create: [SubOptionCreateInput!]
  connect: [SubOptionWhereUniqueInput!]
}

type SubOption {
  id: ID!
  name: String
  option: Option
}

input SubOptionWhereUniqueInput {
  id: ID
}

input SubOptionWhereInput {
  AND: [SubOptionWhereInput!]
  OR: [SubOptionWhereInput!]
  NOT: [SubOptionWhereInput!]
  id: IDFilter
  name: StringFilter
  option: OptionWhereInput
}

input SubOptionOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SubOptionUpdateInput {
  name: String
  option: OptionRelateToOneForUpdateInput
}

input OptionRelateToOneForUpdateInput {
  create: OptionCreateInput
  connect: OptionWhereUniqueInput
  disconnect: Boolean
}

input SubOptionUpdateArgs {
  where: SubOptionWhereUniqueInput!
  data: SubOptionUpdateInput!
}

input SubOptionCreateInput {
  name: String
  option: OptionRelateToOneForCreateInput
}

input OptionRelateToOneForCreateInput {
  create: OptionCreateInput
  connect: OptionWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  products: ProductManyRelationFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: String
  products: ProductRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  products: ProductRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type OrderLine {
  id: ID!
  order: Order
  product: Product
  quantity: Int
  price: Float
  total: Float
  selection: JSON
}

input OrderLineWhereUniqueInput {
  id: ID
}

input OrderLineWhereInput {
  AND: [OrderLineWhereInput!]
  OR: [OrderLineWhereInput!]
  NOT: [OrderLineWhereInput!]
  id: IDFilter
  order: OrderWhereInput
  product: ProductWhereInput
  quantity: IntNullableFilter
  price: FloatNullableFilter
  total: FloatNullableFilter
}

input OrderLineOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
  price: OrderDirection
  total: OrderDirection
}

input OrderLineUpdateInput {
  order: OrderRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
  quantity: Int
  price: Float
  total: Float
  selection: JSON
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input OrderLineUpdateArgs {
  where: OrderLineWhereUniqueInput!
  data: OrderLineUpdateInput!
}

input OrderLineCreateInput {
  order: OrderRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
  quantity: Int
  price: Float
  total: Float
  selection: JSON
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type Order {
  id: ID!
  createdAt: DateTime
  status: OrderStatusType
  lines(
    where: OrderLineWhereInput! = {}
    orderBy: [OrderLineOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderLine!]
  linesCount(where: OrderLineWhereInput! = {}): Int
  total: Float
  client: Client
  metadata: JSON
  paymentMethod: OrderPaymentMethodType
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

enum OrderStatusType {
  PENDING
  PAID
  CANCELLED
  DELIVERED
}

enum OrderPaymentMethodType {
  CASH
  CREDIT_CARD
  PLIN
  YAPE
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  status: OrderStatusTypeNullableFilter
  lines: OrderLineManyRelationFilter
  total: FloatNullableFilter
  client: ClientWhereInput
  paymentMethod: OrderPaymentMethodTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input OrderStatusTypeNullableFilter {
  equals: OrderStatusType
  in: [OrderStatusType!]
  notIn: [OrderStatusType!]
  not: OrderStatusTypeNullableFilter
}

input OrderLineManyRelationFilter {
  every: OrderLineWhereInput
  some: OrderLineWhereInput
  none: OrderLineWhereInput
}

input OrderPaymentMethodTypeNullableFilter {
  equals: OrderPaymentMethodType
  in: [OrderPaymentMethodType!]
  notIn: [OrderPaymentMethodType!]
  not: OrderPaymentMethodTypeNullableFilter
}

input OrderOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  status: OrderDirection
  total: OrderDirection
  paymentMethod: OrderDirection
}

input OrderUpdateInput {
  createdAt: DateTime
  status: OrderStatusType
  lines: OrderLineRelateToManyForUpdateInput
  total: Float
  client: ClientRelateToOneForUpdateInput
  metadata: JSON
  paymentMethod: OrderPaymentMethodType
}

input OrderLineRelateToManyForUpdateInput {
  disconnect: [OrderLineWhereUniqueInput!]
  set: [OrderLineWhereUniqueInput!]
  create: [OrderLineCreateInput!]
  connect: [OrderLineWhereUniqueInput!]
}

input ClientRelateToOneForUpdateInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
  disconnect: Boolean
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  createdAt: DateTime
  status: OrderStatusType
  lines: OrderLineRelateToManyForCreateInput
  total: Float
  client: ClientRelateToOneForCreateInput
  metadata: JSON
  paymentMethod: OrderPaymentMethodType
}

input OrderLineRelateToManyForCreateInput {
  create: [OrderLineCreateInput!]
  connect: [OrderLineWhereUniqueInput!]
}

input ClientRelateToOneForCreateInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createClient(data: ClientCreateInput!): Client
  createClients(data: [ClientCreateInput!]!): [Client]
  updateClient(where: ClientWhereUniqueInput!, data: ClientUpdateInput!): Client
  updateClients(data: [ClientUpdateArgs!]!): [Client]
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteClients(where: [ClientWhereUniqueInput!]!): [Client]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createOption(data: OptionCreateInput!): Option
  createOptions(data: [OptionCreateInput!]!): [Option]
  updateOption(where: OptionWhereUniqueInput!, data: OptionUpdateInput!): Option
  updateOptions(data: [OptionUpdateArgs!]!): [Option]
  deleteOption(where: OptionWhereUniqueInput!): Option
  deleteOptions(where: [OptionWhereUniqueInput!]!): [Option]
  createSubOption(data: SubOptionCreateInput!): SubOption
  createSubOptions(data: [SubOptionCreateInput!]!): [SubOption]
  updateSubOption(
    where: SubOptionWhereUniqueInput!
    data: SubOptionUpdateInput!
  ): SubOption
  updateSubOptions(data: [SubOptionUpdateArgs!]!): [SubOption]
  deleteSubOption(where: SubOptionWhereUniqueInput!): SubOption
  deleteSubOptions(where: [SubOptionWhereUniqueInput!]!): [SubOption]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createOrderLine(data: OrderLineCreateInput!): OrderLine
  createOrderLines(data: [OrderLineCreateInput!]!): [OrderLine]
  updateOrderLine(
    where: OrderLineWhereUniqueInput!
    data: OrderLineUpdateInput!
  ): OrderLine
  updateOrderLines(data: [OrderLineUpdateArgs!]!): [OrderLine]
  deleteOrderLine(where: OrderLineWhereUniqueInput!): OrderLine
  deleteOrderLines(where: [OrderLineWhereUniqueInput!]!): [OrderLine]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  makeOrder(email: String, metadata: Metadata, orderId: String): Order
  patchOrderLine(
    orderId: String
    orderLineId: String
    orderLine: OrderLineItem
  ): Order
  customDeleteOrderLine(orderId: String, lineOrderId: String): Order
}

input Metadata {
  direction: String
  phone: String
  payment: OrderPaymentMethodType
}

input OrderLineItem {
  productId: String
  quantity: Int
  price: Float
  total: Float
  selection: JSON
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  clients(
    where: ClientWhereInput! = {}
    orderBy: [ClientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Client!]
  client(where: ClientWhereUniqueInput!): Client
  clientsCount(where: ClientWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  options(
    where: OptionWhereInput! = {}
    orderBy: [OptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Option!]
  option(where: OptionWhereUniqueInput!): Option
  optionsCount(where: OptionWhereInput! = {}): Int
  subOptions(
    where: SubOptionWhereInput! = {}
    orderBy: [SubOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SubOption!]
  subOption(where: SubOptionWhereUniqueInput!): SubOption
  subOptionsCount(where: SubOptionWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  orderLines(
    where: OrderLineWhereInput! = {}
    orderBy: [OrderLineOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderLine!]
  orderLine(where: OrderLineWhereUniqueInput!): OrderLine
  orderLinesCount(where: OrderLineWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  customGetOrder(orderId: String): Order
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
